#!/usr/bin/env python3
# Copyright (c) 2019 Benjamin Holt -- MIT License

"""
Tiny, seemingly pointless, interactive fiction game to play with `statemachine` and 2D map parsing
"""
import random
import re
import time

import fictiontools as ft
import statemachine as sm
#####


###  Fixtures  ###
CABIN_MAP = """
            x        cabin
        x[pool]-cl  [br]-[lr]  cl-[cabin_e]-
D    |      |             |        |
e---[s_w][stream]---[clearing]--[c_e]------
e--[s_sw][stream_s][clearing_s]--[c_se]----
p    |      |            |         |
  woods all around

Key:
    s_w: stream_w  s_sw: stream_sw
    br: bed_room  lr: living_room
    c_e: clearing_east  c_se: clearing_se
"""

messages = {
}
#####


###  Actions  ###
GO_COMMANDS = {  # Note: action is added by the map builder
    "n": ft.Command("north", "n", help="Go north"),
    "s": ft.Command("south", "s", help="Go south"),
    "e": ft.Command("east", "e", help="Go east"),
    "w": ft.Command("west", "w", help="Go west"),
    "u": ft.Command("up", "u", help="Go up"),
    "d": ft.Command("down", "d", help="Go down"),
}

def look_action(i, t):
    s = t.dst if t.dst is not None else t.state
    return ft.adlib(messages.get(s, s))

look_cmd = ft.Command("look", "l", action=look_action, help="Print a description of your surroundings")

sorry_action = "Sorry, you can't do that."
#####


###  World  ###
world = sm.StateMachine("start")
world.add(state="start", test=sm.trueTest, dst="clearing", action=look_action, tag="Start")
m = ft.Map(CABIN_MAP)
m.connect("pool", "clearing", "e")
m.connect("cabin_e", "clearing", "w")
border_rooms = (
    "stream_w", "stream_sw", "stream_s",
    "clearing_s", "clearing_se", "clearing_e",
    "cabin_e",
)
for r,d in ( (r,d) for r in border_rooms for d in "nsew" ):
    m.connect(r, "deep_woods", d, lenient=True)

m.build(world, GO_COMMANDS, look_action)

world.add(None, look_cmd, None, look_action, tag="Look")

world.build("deep_woods",
    (GO_COMMANDS["n"], None, look_action),
    (GO_COMMANDS["s"], None, look_action),
    (GO_COMMANDS["e"],  None, look_action),
    (GO_COMMANDS["w"],  None, look_action),
)
world.add(None, sm.inTest(["xyzzy", "locus amoenus",]), "clearing", look_action, tag="Magic")
ft.Command.add_help(world)
# world.add(None, lambda i,_: i != "crash", None, sorryAction, tag="Not crash")  # You can type "crash" to dump the state machine's trace
world.add(None, sm.trueTest, None, sorry_action, tag="Sorry")
#####


###  Main  ###
# import sys
print("Cabin in the Woods", flush=True)
time.sleep(0.1)  # HACK: wait for flush; sometimes prompt prints out-of-order with print output in spite of flush=True
print(world.input(input("Press enter to start. ")), flush=True)
while True:
    time.sleep(0.1)  # HACK: wait for flush
    out = world.input(input("> "))
    if out:
        print(out, flush=True)
#####
