#!/usr/bin/env python3
# Copyright (c) 2019 Benjamin Holt -- MIT License

"""
Tiny, seemingly pointless, interactive fiction game to play with `statemachine` and 2D map parsing
"""
import random
import re
import time

import fictiontools as ft
import statemachine as sm
#####


###  Fixtures  ###
CABIN_MAP = """
            x       x cabin x
        x[pool]-cl x[br]-[lr]x cl-[cabin_e]-
D    |      |        x    |        |
e---[s_w][stream]---[clearing]--[c_e]------
e--[s_sw][stream_s][clearing_s]--[c_se]----
p    |      |            |         |
  woods all around

Key:
    s_w: stream_w  s_sw: stream_sw
    br: bed_room  lr: living_room
    c_e: clearing_east  c_se: clearing_se
"""

messages = {
}
#####


###  Actions  ###
GO_COMMANDS = {
    "n": sm.inTest(["n", "north"]),
    "s": sm.inTest(["s", "south"]),
    "e": sm.inTest(["e", "east"]),
    "w": sm.inTest(["w", "west"]),
}

def lookAction(i, t):
    s = t.dst if t.dst is not None else t.state
    return ft.adlib(messages.get(s, s))

sorryAction = "Sorry, you can't do that."
#####


###  World  ###
world = sm.StateMachine("start")
world.add(state="start", test=sm.trueTest, dst="clearing", action=lookAction, tag="Start")
m = ft.Map(CABIN_MAP)
world.build("pool",
    (GO_COMMANDS["e"], "clearing", lookAction),
    (GO_COMMANDS["w"], None, sorryAction),
    (GO_COMMANDS["n"], None, sorryAction),
)
world.build("bed_room",
    (GO_COMMANDS["w"], None, sorryAction),
    (GO_COMMANDS["n"], None, sorryAction),
    (GO_COMMANDS["s"], None, sorryAction),
)
world.build("living_room",
    (GO_COMMANDS["e"], None, sorryAction),
    (GO_COMMANDS["n"], None, sorryAction),
)
world.add("cabin_e", GO_COMMANDS["w"], "clearing", lookAction)

# world.add(state="start", test=sm.trueTest, dst="00", action=lookAction, tag="Start")
# m = Map(GRID_MAP)

m.build(world, GO_COMMANDS, lookAction)

world.add(None, sm.inTest(["l", "look",]), None, lookAction, tag="Look")

world.build(None,
    (GO_COMMANDS["n"], "deep_woods", lookAction),
    (GO_COMMANDS["s"], "deep_woods", lookAction),
    (GO_COMMANDS["e"],  "deep_woods", lookAction),
    (GO_COMMANDS["w"],  "deep_woods", lookAction),
)
world.add(None, sm.inTest(["xyzzy", "locus amoenus",]), "clearing", lookAction, tag="Look")
# world.add(None, lambda i,_: i != "crash", None, sorryAction, tag="Not crash")  # You can type "crash" to dump the state machine's trace
world.add(None, sm.trueTest, None, sorryAction, tag="Sorry")
#####


###  Main  ###
# import sys
print("Cabin in the Woods", flush=True)
time.sleep(0.1)  # HACK: wait for flush; sometimes prompt prints out-of-order with print output in spite of flush=True
print(world.input(input("Press enter to start. ")), flush=True)
while True:
    time.sleep(0.1)  # HACK: wait for flush
    out = world.input(input("> "))
    if out:
        print(out, flush=True)
#####
