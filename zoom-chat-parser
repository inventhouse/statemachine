#!/usr/bin/env python3
# zoom-chat-parser: Copyright © 2024 Benjamin Holt - MIT License

from collections import Counter, deque
from dataclasses import dataclass, field
from typing import Any

import smallmachine as sm


@dataclass
class ChatMessage:
    time_str: str
    sender: str
    message_lines: list[str] = field(default_factory=list)
    replies: list["ChatMessage"] = field(default_factory=list)
    primary_message_prefix: str = None  # Primary prefix is enough to identify the message it's replying to
    # primary_message: "ChatMessage" = None  # Could switch to this if we need to navigate up the tree
    reactions: list[str] = field(default_factory=list)


chat_lines = """
15:01:39 From Michael M to Everyone:
    When are we going to have AI run team summit?
15:01:45 From Jared Roberts to Everyone:
    Anyone still remember NFTs?
15:01:47 From Aaron S to Everyone:
    Replying to "When are we going to..."
    
    We already do
15:01:53 From Aaron S to Everyone:
    Replying to "When are we going to..."
    
    Gabe.ai
15:01:53 From Michael M to Everyone:
    Reacted to "We already do" with 😂
"""

class action_formatter:
    def __init__(self, action):
        self.action = action
    def __call__(self, *args: Any, **kwds: Any) -> Any:
        return self.action(*args, **kwds)
    def __repr__(self) -> str:
        return f"{self.action.__name__}(i)"


class ChatParser:
    def __init__(self) -> None:
        # Store messages LIFO to make finding previous message easy for replies and reactions
        self.message_stack = deque()
        self.current_message = None

        header_test = sm.match_test(r"(?P<time_str>(?P<hour>\d{2}):(?P<minute>\d{2})):(?P<second>\d{2}) From (?P<from>.+?) to (?P<to>.+?):")  # Hack: only capture hour and minute for time
        @action_formatter
        def begin_message(i):
            if self.current_message:
                self.message_stack.appendleft(self.current_message)
            result = self.ctx.result
            self.current_message = ChatMessage(
                time_str=result.group("time_str"),
                sender=result.group("from"),
            )

        reaction_test = sm.match_test(r'\s+Reacted to "(?P<prefix>.+?)([.]{3})?" with (?P<reaction>.+?)')
        @action_formatter
        def add_reaction(i):
            result = self.ctx.result
            prefix = result.group("prefix")
            previous_message = self.find_previous_message(prefix)
            if previous_message:
                previous_message.reactions.append(result.group("reaction"))
            self.current_message = None  # Reactions don't contain actual messages

        reply_test = sm.match_test(r'\s+Replying to "(?P<prefix>.+?)([.]{3})?"')
        blank_test = sm.match_test(r"\s*$")
        @action_formatter
        def add_reply(i):
            result = self.ctx.result
            prefix = result.group("prefix")
            self.current_message.primary_message_prefix = prefix
            primary_message = self.find_previous_message(prefix)
            if primary_message:
                # self.current_message.primary_message = primary_message
                primary_message.replies.append(self.current_message)

        message_line_test = sm.match_test(r"\s+(?P<line>.*)")
        @action_formatter
        def add_message_line(i):
            l = self.ctx.result.group("line")
            self.current_message.message_lines.append(l)

        chat_rules = {
            "start": [
                ("header", header_test, begin_message, "message"),
                ("blank", blank_test, None, ...),
            ],
            "message": [
                ("reaction", reaction_test, add_reaction, "start"),
                ("reply", reply_test, add_reply, "reply_blank"),
                ("line", message_line_test, add_message_line, "message_lines"),
            ],
            "reply_blank": [
                # Blank line between "Replying to" and message is part of the format, not part of the message
                ("blank", blank_test, None, "message_lines"),
            ],
            "message_lines": [
                ("header", header_test, begin_message, "message"),
                ("line", message_line_test, add_message_line, ...),
            ],
        }

        self.parser, self.ctx = sm.statemachine("start", chat_rules)
        # self.parser, self.ctx = sm.statemachine("start", chat_rules, debug=True)


    ###  Helpers  ###
    def find_previous_message(self, prefix):
        for m in self.message_stack:
            if m.message_lines and m.message_lines[0].startswith(prefix):
                return m
        return None

    @property
    def threads(self):
        "Returns message threads, oldest first"
        if not self.message_stack:
            return ()
        return (
            m for
            m in reversed(chat_parser.message_stack)
            # Threaded messages are included in the primary message
            if m.primary_message_prefix is None
        )

    def __call__(self, lines):
        for l in lines:
            self.parser(l)


INDENT = "    "
def format_message_slack(message, level=0):
    lines = []
    lines.append(f"{INDENT * level}_({message.time_str}) *{message.sender}*:_")
    for l in message.message_lines:
        lines.append(f"{INDENT * (level + 1)}{l}")
    if message.reactions:
        r_counter = Counter(message.reactions)
        reactions = "\N{EM SPACE}\N{EM SPACE}".join(f"{r}\N{NARROW NO-BREAK SPACE}{c}" for r, c in r_counter.items())
        lines.append(f"{INDENT * (level + 1)}{reactions}")
    for r in message.replies:
        lines.extend(format_message_slack(r, level + 1))
    return lines


if __name__ == "__main__":
    import sys
    chat_parser = ChatParser()
    chat_file = sys.argv[1] if len(sys.argv) > 1 else None
    if chat_file:
        with open(chat_file) as f:
            chat_parser(f)
    else:
        chat_parser(chat_lines.split("\n"))

    format_message = format_message_slack
    for t in chat_parser.threads:
        print("\n".join(format_message(t)))
        print("══"*10)
